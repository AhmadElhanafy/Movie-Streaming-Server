// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250901140400_initial-migrations")]
    partial class initialmigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Domain.LibraryPath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ExcludePattern")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("IncludePattern")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTimeOffset?>("LastScanCompletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastScanStartedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("LibraryPaths");
                });

            modelBuilder.Entity("Api.Domain.MediaItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long?>("Duration")
                        .HasColumnType("bigint");

                    b.Property<int?>("EpisodeNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<Guid>("LibraryPathId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<int?>("SeasonNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ShowTitle")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("SourceAudioCodec")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<double?>("SourceFrameRate")
                        .HasColumnType("double precision");

                    b.Property<int?>("SourceHeight")
                        .HasColumnType("integer");

                    b.Property<string>("SourcePath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<long>("SourceSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceVideoCodec")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("SourceWidth")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("TmdbId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTimeOffset>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ImdbId");

                    b.HasIndex("LibraryPathId");

                    b.HasIndex("Title");

                    b.HasIndex("TmdbId");

                    b.HasIndex("Kind", "ShowTitle", "SeasonNumber", "EpisodeNumber");

                    b.ToTable("MediaItems");
                });

            modelBuilder.Entity("Api.Domain.MediaPerson", b =>
                {
                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int?>("BillingOrder")
                        .HasColumnType("integer");

                    b.Property<string>("CharacterName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("MediaItemId", "PersonId", "Role");

                    b.HasIndex("PersonId");

                    b.HasIndex("MediaItemId", "Role", "BillingOrder");

                    b.ToTable("MediaPeople");
                });

            modelBuilder.Entity("Api.Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("TmdbId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("ImdbId");

                    b.HasIndex("Name");

                    b.HasIndex("TmdbId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Api.Domain.PlaybackSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientVersion")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<string>("Device")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset?>("EndedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTimeOffset>("LastUpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlaybackType")
                        .HasColumnType("integer");

                    b.Property<double>("PositionSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<DateTimeOffset>("StartedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("StreamRenditionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MediaItemId");

                    b.HasIndex("StreamRenditionId");

                    b.HasIndex("UserId", "MediaItemId");

                    b.ToTable("PlaybackSessions");
                });

            modelBuilder.Entity("Api.Domain.StreamRendition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioCodec")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("BitrateKbps")
                        .HasColumnType("integer");

                    b.Property<int>("Container")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<double?>("FrameRate")
                        .HasColumnType("double precision");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("ManifestObjectKey")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid>("MediaItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("ObjectKeyPrefix")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int?>("SegmentCount")
                        .HasColumnType("integer");

                    b.Property<int?>("SegmentDurationSeconds")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("VideoCodec")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MediaItemId", "Width", "Height", "BitrateKbps")
                        .IsUnique();

                    b.ToTable("StreamRenditions");
                });

            modelBuilder.Entity("Api.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Api.Domain.MediaItem", b =>
                {
                    b.HasOne("Api.Domain.LibraryPath", "LibraryPath")
                        .WithMany("Media")
                        .HasForeignKey("LibraryPathId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LibraryPath");
                });

            modelBuilder.Entity("Api.Domain.MediaPerson", b =>
                {
                    b.HasOne("Api.Domain.MediaItem", "MediaItem")
                        .WithMany("People")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Person", "Person")
                        .WithMany("Credits")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Api.Domain.PlaybackSession", b =>
                {
                    b.HasOne("Api.Domain.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.StreamRendition", "StreamRendition")
                        .WithMany()
                        .HasForeignKey("StreamRenditionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Api.Domain.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");

                    b.Navigation("StreamRendition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Domain.StreamRendition", b =>
                {
                    b.HasOne("Api.Domain.MediaItem", "MediaItem")
                        .WithMany("Renditions")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("Api.Domain.LibraryPath", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("Api.Domain.MediaItem", b =>
                {
                    b.Navigation("People");

                    b.Navigation("Renditions");
                });

            modelBuilder.Entity("Api.Domain.Person", b =>
                {
                    b.Navigation("Credits");
                });

            modelBuilder.Entity("Api.Domain.User", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
